scalar DateTime

"Users"
type User {
  "Unique user identifier"
  id: Int!
  "User username"
  username: String!
  "User email"
  email: String!
  "Creation timestamp"
  createdAt: DateTime!
  "Whether the current user verified the email"
  emailVerified: Boolean!
  "User avatar link"
  image: String
  "Timestamp of the last updated"
  updatedAt: DateTime!
}

"Posts"
type Post {
  "Unique post identifier"
  id: Int!
  "Text content of the post"
  content: String!
  "Creation timestamp"
  createdAt: DateTime!
  "Author's username"
  username: String!
  "Number of likes on this post"
  likesCount: Int!
  "Number of comments on this post"
  commentsCount: Int!
  "Whether the current user liked this post"
  isLiked: Boolean!
  # "List of comments for this post"
  # comments: [Comment!]!
}

input CreatePostInput {
  "Text body for the new post"
  content: String!
}

type CreatePostResponse {
  "HTTP-like status code"
  code: Int!
  "Indicates whether the operation succeeded"
  success: Boolean!
  "Human-readable status message"
  message: String!
  "The created post, if successful"
  post: Post
}

type DeletePostResponse {
  "HTTP-like status code"
  code: Int!
  "Indicates whether the operation succeeded"
  success: Boolean!
  "Human-readable status message"
  message: String!
  "Identifier of the deleted post"
  postId: Int
}

"Likes"
type LikePostResponse {
  "HTTP-like status code"
  code: Int!
  "Indicates whether the operation succeeded"
  success: Boolean!
  "Human-readable status message"
  message: String!
  "Post with updated like counts"
  post: Post
}

"Comments"
type Comment {
  "Unique comment identifier"
  id: Int!
  "Text content of the comment"
  content: String!
  "Creation timestamp"
  createdAt: DateTime!
  "Author's username"
  username: String!
}

input CreateCommentInput {
  "Identifier of the post to comment on"
  postId: Int!
  "Text body of the comment"
  content: String!
}

type CreateCommentResponse {
  "HTTP-like status code"
  code: Int!
  "Indicates whether the operation succeeded"
  success: Boolean!
  "Human-readable status message"
  message: String!
  "The created comment, if successful"
  comment: Comment
}

type DeleteCommentResponse {
  "HTTP-like status code"
  code: Int!
  "Indicates whether the operation succeeded"
  success: Boolean!
  "Human-readable status message"
  message: String!
  "Identifier of the deleted comment"
  commentId: Int
}

"Conversations"
type ConversationParticipant {
  id: Int!
  username: String!
  image: String
}

type Conversation {
  id: Int!
  type: String!
  name: String
  createdAt: DateTime!
  participants: [ConversationParticipant!]!
  lastMessage: Message
}

type CreateConversationResponse {
  "HTTP-like status code"
  code: Int!
  "Indicates whether the operation succeeded"
  success: Boolean!
  "Human-readable status message"
  message: String!
  "The created conversation id, if successful"
  conversationId: Int
}

"Messages"
type Message {
  id: Int!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  sender: ConversationParticipant!
}

type CreatedMessage {
  id: Int!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CreateMessageResponse {
  "HTTP-like status code"
  code: Int!
  "Indicates whether the operation succeeded"
  success: Boolean!
  "Human-readable status message"
  message: String!
  "The created message, if successful"
  createdMessage: CreatedMessage
}

# Queries
type Query {
  # Users
  "List all users"
  users: [User!]!
  "Single user"
  user(userId: Int!): User!
  "Search user by username or email"
  searchUser(query: String!): [User!]!
  # Posts
  "List all posts"
  posts: [Post!]!
  "List user posts"
  userPosts(userName: String!): [Post!]!
  "Single post"
  post(postId: Int!): Post!
  # Comments
  "List comments for a specific post"
  comments(postId: Int!): [Comment!]!
  # Conversations
  "List all user conversations"
  conversations: [Conversation!]!
  # Messages
  "List all conversation messages"
  conversationMessages(conversationId: Int!): [Message!]!
}

# Mutations
type Mutation {
  # Posts
  "Create a new post"
  createPost(input: CreatePostInput!): CreatePostResponse!
  "Delete a post by its identifier"
  deletePost(postId: Int!): DeletePostResponse!
  # Likes
  "Add a like to a post"
  likePost(postId: Int!): LikePostResponse!
  "Remove a like from a post"
  unlikePost(postId: Int!): LikePostResponse!
  # Comments
  "Create a new comment on a post"
  createComment(input: CreateCommentInput!): CreateCommentResponse!
  "Delete a comment by its identifier"
  deleteComment(commentId: Int!): DeleteCommentResponse!
  # Conversations
  "Create a new conversation"
  createConversation(userId: Int!): CreateConversationResponse!
  # Messages
  "Create a new conversation message"
  createMessage(conversationId: Int!, content: String!): CreateMessageResponse!
}

# Subscriptions
type Subscription {
  messageAdded(conversationId: ID): Message!
  chatUpdated: Conversation!
  userOnlineStatusChanged: User!
}
